import { Controller, Get, Post, Put, Delete, Param, Body, UseGuards } from '@nestjs/common';
import { CalendarService } from './calendar.service';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { GetUser } from '../auth/get-user.decorator';
import { User } from '../users/user.entity';

@Controller('calendar')
export class CalendarController {
  constructor(private readonly calendarService: CalendarService) {}

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–∞—Ç—ã –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ –º–µ—Å—è—Ü)
  @UseGuards(JwtAuthGuard)
  @Get()
  async getUserCalendar(@GetUser() user: User) {
    return this.calendarService.getAllCalendarEntries(user.id); // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –º–µ—Å—è—Ü –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–µ
  @UseGuards(JwtAuthGuard)
  @Get(':date')
  async getCalendarByDate(
    @GetUser() user: User,
    @Param('date') date: string, // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
  ) {
    return this.calendarService.getCalendarByDate(user.id, date); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–µ
  }


/*   @UseGuards(JwtAuthGuard)
  @Post(':date/event')
  async addEvent(
    @GetUser() user: User,
    @Param('date') date: string,
    @Body() { event }: { event: string }
  ) {
    return this.calendarService.addEvent(user.id, date, event);
  } */

    @UseGuards(JwtAuthGuard)
@Put(':date/events')
async updateEvents(
  @GetUser() user: User,
  @Param('date') date: string,
  @Body() body: { events: string[] }
) {
  return this.calendarService.updateEvents(user.id, date, body.events);
}



   // –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
   @UseGuards(JwtAuthGuard)
   @Delete(':date/event')
   async removeEvent(
     @GetUser() user: User,
     @Param('date') date: string,
     @Body() { event }: { event: string }
   ) {
     return this.calendarService.removeEvent(user.id, date, event);
   }
 


/* 
  // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  @UseGuards(JwtAuthGuard)
  @Post('event')
  async addEvent(
    @GetUser() user: User,
    @Body() { date, event }: { date: string; event: string }
  ) {
    return this.calendarService.addEvent(user.id, date, event);
  }

  // –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
  @UseGuards(JwtAuthGuard)
  @Delete('event')
  async removeEvent(
    @GetUser() user: User,
    @Body() { date, event }: { date: string; event: string }
  ) {
    return this.calendarService.removeEvent(user.id, date, event);
  }
 */
  // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
  // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
  @UseGuards(JwtAuthGuard)
  @Put(':date/note')
  async updateNote(
    @GetUser() user: User,
    @Param('date') date: string,
    @Body() { note }: { note: string }
  ) {
    return this.calendarService.updateNote(user.id, date, note);
  }


  // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å
  @UseGuards(JwtAuthGuard)
  @Post(':date/outfits')
  async addOutfitToDate(
    @GetUser() user: User,
    @Param('date') date: string,
    @Body() body: { outfitId: number } // üí° –ò–∑–≤–ª–µ–∫–∞–µ–º outfitId –∏–∑ –æ–±—ä–µ–∫—Ç–∞
  ) {
    return this.calendarService.addOutfitToDate(user.id, date, body.outfitId);
  }

/*   @Post(':date/outfits')
  async addOutfitToDate(
    @GetUser() user: User,
    @Param('date') date: string, // –î–∞—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞–∑–∞
    @Body() outfitId: number // ID –æ–±—Ä–∞–∑–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  ) {
    return this.calendarService.addOutfitToDate(user.id, date, outfitId);
  } */

  // –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–∑ —Å –¥–Ω—è
  @UseGuards(JwtAuthGuard)
  @Delete(':date/outfits')
  async removeOutfitFromDate(
    @GetUser() user: User,
    @Param('date') date: string, // –î–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑–∞
    @Body() body: { outfitId: number } // üí° –ò–∑–≤–ª–µ–∫–∞–µ–º outfitId –∏–∑ –æ–±—ä–µ–∫—Ç–∞
  ) {
    return this.calendarService.removeOutfitFromDate(user.id, date, body.outfitId);
  }
}

/* import { Controller, Get, Post, Delete, Param, Body, UseGuards, Query } from '@nestjs/common';
import { CalendarService } from './calendar.service';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { GetUser } from '../auth/get-user.decorator';
import { User } from '../users/user.entity';
import { Outfit } from '../outfits/outfit.entity/outfit.entity';

@Controller('calendar')
export class CalendarController {
  constructor(private readonly calendarService: CalendarService) {}

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  @UseGuards(JwtAuthGuard)
  @Get()
  async getUserCalendar(@GetUser() user: User) {
    return this.calendarService.getUserCalendar(user.id);
  }

  // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–∑ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  @UseGuards(JwtAuthGuard)
  @Post('add')
  async addToCalendar(
    @GetUser() user: User,
    @Body() { outfitId, date, note }: { outfitId: number, date: string, note: string },
  ) {
    const outfit = new Outfit(); // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–∑ –ø–æ outfitId
    outfit.id = outfitId;

    return this.calendarService.addToCalendar(user.id, outfit, date, note);
  }

  // –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–∑ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  @UseGuards(JwtAuthGuard)
  @Delete(':id')
  async removeFromCalendar(@GetUser() user: User, @Param('id') calendarId: number) {
    return this.calendarService.removeFromCalendar(user.id, calendarId);
  }

  // –ü–æ–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å –∫–∞–∫ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å–Ω—ã–π
  @UseGuards(JwtAuthGuard)
  @Post('mark-important/:date')
  async markAsImportant(@GetUser() user: User, @Param('date') date: string) {
    return this.calendarService.markAsImportant(user.id, date);
  }

  // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –¥–µ–Ω—å
  @UseGuards(JwtAuthGuard)
  @Post('add-note')
  async addNote(
    @GetUser() user: User,
    @Body() { date, note }: { date: string, note: string },
  ) {
    return this.calendarService.addNoteToDay(user.id, date, note);
  }
}
 */