import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Calendar } from './calendar.entity';
import { User } from '../users/user.entity';
import { WeatherService } from '../weather/weather.service'; // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã
import { Outfit } from 'src/outfits/outfit.entity/outfit.entity';
import dayjs from 'dayjs';
import isSameOrAfter from 'dayjs/plugin/isSameOrAfter';
// üî• –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–ª–∞–≥–∏–Ω –ø–µ—Ä–µ–¥ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
dayjs.extend(isSameOrAfter);

@Injectable()
export class CalendarService {
  constructor(
    @InjectRepository(Calendar)
    private readonly calendarRepository: Repository<Calendar>, 
    private readonly weatherService: WeatherService, 
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,  
    @InjectRepository(Outfit)
    private readonly outfitRepository: Repository<Outfit> // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è Outfit

  ) {}

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –º–µ—Å—è—Ü –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥
  async getAllCalendarEntries(userId: number): Promise<Calendar[]> {
    const calendarEntries = await this.calendarRepository.find({
      where: { user: { id: userId } },
      relations: ['outfits'], // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑—ã
    });
    return calendarEntries;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
  async getCalendarByDate(userId: number, date: string): Promise<any> {
  let calendarEntry = await this.calendarRepository.findOne({
    where: { user: { id: userId }, date },
    relations: ['outfits'],
  });

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = await this.userRepository.findOne({ where: { id: userId } });
  const userCity = user?.city || "Astana";

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç
  let temperature: number | null = null;
  let weatherType: string | null = null;

  try {
    const weatherData = await this.weatherService.getWeatherForDate(userCity, date);
    temperature = weatherData.temperature;
    weatherType = weatherData.weatherType;
  } catch (err) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', err.message);
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  if (!calendarEntry) {
    return {
      date,
      events: [],
      note: '',
      outfits: [],
      temperature,
      weatherType,
    };
  }

  // –í–æ–∑–≤—Ä–∞—Ç —Å –∑–∞–ø–∏—Å—è–º–∏
  return {
    date: calendarEntry.date,
    events: calendarEntry.events,
    note: calendarEntry.note,
    outfits: calendarEntry.outfits,
    temperature,
    weatherType,
  };
}




  /* async getCalendarByDate(userId: number, date: string): Promise<any> {
    const calendarEntry = await this.calendarRepository.findOne({
      where: { user: { id: userId }, date },
      relations: ['outfits'],
    });

    if (!calendarEntry) {
      throw new Error('–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.');
    }

    const today = dayjs().format('YYYY-MM-DD');
    const isFutureOrToday = dayjs(date).isSameOrAfter(today);

    let temperature: number | null = null; // ‚úÖ –¢–µ–ø–µ—Ä—å TypeScript –Ω–µ —Ä—É–≥–∞–µ—Ç—Å—è
    let weatherType: string | null = null;

    if (isFutureOrToday) {
      const user = await this.userRepository.findOne({ where: { id: userId } });
      const userCity = user?.city || "Astana";

      try {
        const weatherData = await this.weatherService.getWeatherForDate(userCity, date);
        temperature = weatherData.temperature;
        weatherType = weatherData.weatherType;
      } catch (err) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', err.message);
      }
    }

    return {
      date: calendarEntry.date,
      events: calendarEntry.events,
      note: calendarEntry.note,
      outfits: calendarEntry.outfits,
      temperature,
      weatherType,
    };
  } */

/*   async getCalendarByDate(userId: number, date: string): Promise<any> {
    const calendarEntry = await this.calendarRepository.findOne({
      where: { user: { id: userId }, date },
      relations: ['outfits'], // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑—ã –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
    });

    if (!calendarEntry) {
      throw new Error('–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.');
    }

    // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.userRepository.findOne({ where: { id: userId } });
    const userCity = user?.city || "Astana"; 

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
    const weatherData = await this.weatherService.getWeatherForDate(userCity, date);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    return {
      date: calendarEntry.date,
      events: calendarEntry.events,
      note: calendarEntry.note,
      outfits: calendarEntry.outfits,
      temperature: weatherData.temperature,
      weatherType: weatherData.weatherType,
    };
  } */

  // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
  async addEvent(userId: number, date: string, event: string): Promise<Calendar> {
    let calendarEntry = await this.calendarRepository.findOne({
      where: { date, user: { id: userId } }
    });
  
    if (!calendarEntry) {
      calendarEntry = this.calendarRepository.create({
        date,
        user: { id: userId },
        events: [event],
        isImportant: true // üëà –Ω–æ–≤—ã–π –¥–µ–Ω—å = —Å—Ä–∞–∑—É –≤–∞–∂–Ω—ã–π
      });
    } else {
      if (!calendarEntry.events) {
        calendarEntry.events = [];
      }
  
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
      if (!calendarEntry.events.includes(event)) {
        calendarEntry.events.push(event);
      }
  
      calendarEntry.isImportant = true; // üëà –ø–æ–º–µ—á–∞–µ–º –≤–∞–∂–Ω—ã–º
    }
  
    return this.calendarRepository.save(calendarEntry);
  }  
  /* async addEvent(userId: number, date: string, event: string): Promise<Calendar> {
    let calendarEntry = await this.calendarRepository.findOne({ where: { date, user: { id: userId } } });

    if (!calendarEntry) {
      calendarEntry = this.calendarRepository.create({ date, user: { id: userId }, events: [event] });
    } else {
      calendarEntry.events.push(event);
    }

    return this.calendarRepository.save(calendarEntry);
  } */

  // –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
  async removeEvent(userId: number, date: string, event: string): Promise<Calendar | null> {
    const calendarEntry = await this.calendarRepository.findOne({
      where: { date, user: { id: userId } }
    });
  
    if (!calendarEntry || !calendarEntry.events) return null;
  
    calendarEntry.events = calendarEntry.events.filter(e => e !== event);
  
    // üëá –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî –¥–µ–Ω—å –Ω–µ –≤–∞–∂–Ω—ã–π
    calendarEntry.isImportant = calendarEntry.events.length > 0;
  
    return this.calendarRepository.save(calendarEntry);
  }
  
/*   async removeEvent(userId: number, date: string, event: string): Promise<Calendar | null> {
    const calendarEntry = await this.calendarRepository.findOne({ where: { date, user: { id: userId } } });

    if (calendarEntry) {
      calendarEntry.events = calendarEntry.events.filter(e => e !== event);
      return this.calendarRepository.save(calendarEntry);
    }

    return null;
  } */

  // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
  async updateNote(userId: number, date: string, note: string): Promise<Calendar> {
    let calendarEntry = await this.calendarRepository.findOne({ where: { date, user: { id: userId } } });

    if (!calendarEntry) {
      calendarEntry = this.calendarRepository.create({ date, user: { id: userId }, note });
    } else {
      calendarEntry.note = note;
    }

    return this.calendarRepository.save(calendarEntry);
  }

  // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å
  async addOutfitToDate(userId: number, date: string, outfitId: number): Promise<Calendar> {
  let calendarEntry = await this.calendarRepository.findOne({
    where: { user: { id: userId }, date },
    relations: ['outfits'],
  });

  if (!calendarEntry) {
    const user = await this.userRepository.findOne({ where: { id: userId } });
    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    calendarEntry = this.calendarRepository.create({
      date,
      user,
      events: [],
      outfits: [],
      isImportant: true,
    });
  }

  const outfit = await this.outfitRepository.findOne({ where: { id: outfitId } });
  if (!outfit) {
    throw new Error('–û–±—Ä–∞–∑ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
  if (!calendarEntry.outfits.some(o => o.id === outfitId)) {
    calendarEntry.outfits.push(outfit);
  }

  return this.calendarRepository.save(calendarEntry);
}

  /* async addOutfitToDate(userId: number, date: string, outfitId: number): Promise<Calendar> {
    console.log('Looking for outfit with ID:', outfitId);  // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
  
    const calendarEntry = await this.calendarRepository.findOne({
      where: { user: { id: userId }, date },
      relations: ['outfits'], // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑—ã –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
    });
  
    if (!calendarEntry) {
      throw new Error('–ó–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }
    console.log('Outfit ID:', outfitId);
    const outfit = await this.outfitRepository.findOne({ where: { id: outfitId } });
    if (!outfit) {
      throw new Error('–û–±—Ä–∞–∑ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
  
    console.log('Outfit found:', outfit);  // –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –æ–±—Ä–∞–∑ –Ω–∞–π–¥–µ–Ω
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–∑ –≤ –º–∞—Å—Å–∏–≤ outfits
    calendarEntry.outfits.push(outfit);
  
    return this.calendarRepository.save(calendarEntry); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  }
     */

  // –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–∑ —Å –¥–Ω—è
  async removeOutfitFromDate(userId: number, date: string, outfitId: number): Promise<Calendar> {
    const calendarEntry = await this.calendarRepository.findOne({
      where: { user: { id: userId }, date },
      relations: ['outfits'],
    });

    if (!calendarEntry) {
      throw new Error('–ó–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }

    const outfitIndex = calendarEntry.outfits.findIndex((outfit) => outfit.id === outfitId);
    if (outfitIndex === -1) {
      throw new Error('–û–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç—Ç–æ–π –¥–∞—Ç–µ.');
    }

    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–∑
    calendarEntry.outfits.splice(outfitIndex, 1);

    return this.calendarRepository.save(calendarEntry); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  }








  async updateEvents(userId: number, date: string, newEvents: string[]): Promise<Calendar> {
  let calendarEntry = await this.calendarRepository.findOne({
    where: { date, user: { id: userId } }
  });

  const cleanedEvents = newEvents
    .map(e => e.trim())
    .filter(e => e.length > 0);

  if (!calendarEntry) {
    const user = await this.userRepository.findOne({ where: { id: userId } });
    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    calendarEntry = this.calendarRepository.create({
      date,
      user,
      events: cleanedEvents.length > 0 ? cleanedEvents : null,
      isImportant: cleanedEvents.length > 0
    });
  } else {
    calendarEntry.events = cleanedEvents.length > 0 ? cleanedEvents : null;
    calendarEntry.isImportant = cleanedEvents.length > 0;
  }

  return this.calendarRepository.save(calendarEntry);
}


}



/* import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Calendar } from './calendar.entity';
import { User } from '../users/user.entity';
import { Outfit } from '../outfits/outfit.entity/outfit.entity';

@Injectable()
export class CalendarService {
  constructor(
    @InjectRepository(Calendar)
    private readonly calendarRepository: Repository<Calendar>,
  ) {}

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  async getUserCalendar(userId: number): Promise<Calendar[]> {
    return this.calendarRepository.find({ where: {user: { id: userId }}, relations: ['outfits'] });
  }

  // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–∑ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  async addToCalendar(userId: number, outfit: Outfit, date: string, note: string): Promise<Calendar> {
    const calendarEntry = this.calendarRepository.create({
      date,
      note,
      user: { id: userId },
      outfits: [outfit],
    });

    return this.calendarRepository.save(calendarEntry);
  }

  // –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–∑ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  async removeFromCalendar(userId: number, calendarId: number): Promise<void> {
    await this.calendarRepository.delete({ id: calendarId, user: { id: userId } });
  }

  // –ü–æ–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å –∫–∞–∫ –∑–Ω–∞—á–∏–º—ã–π
  async markAsImportant(userId: number, date: string): Promise<void> {
    const calendarEntry = await this.calendarRepository.findOne({ where: { user: { id: userId }, date } });
    if (calendarEntry) {
      calendarEntry.isImportant = true;
      await this.calendarRepository.save(calendarEntry);
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
  async addNoteToDay(userId: number, date: string, note: string): Promise<void> {
    const calendarEntry = await this.calendarRepository.findOne({ where: { user: { id: userId }, date } });
    if (calendarEntry) {
      calendarEntry.note = note;
      await this.calendarRepository.save(calendarEntry);
    }
  }
}
 */